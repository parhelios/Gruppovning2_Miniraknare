@page "/Calculator"
@using Shared
@rendermode InteractiveServer
@inject ICalculatorService CalculatorService
<h3>Calculator</h3>

@* <EditForm FormName="InputForm" Model="InputValues" OnValidSubmit="SaveValues">
	<InputText @bind-Value="InputValues.Value1"></InputText>
	<InputText @bind-Value="InputValues.Value2"></InputText>
	<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled">Submit</MudButton>
</EditForm> *@

<EditForm FormName="InputForm" Model="Input" OnValidSubmit="OnSubmit">
	@* <InputText @bind-Value="Input"></InputText> *@
	<MudTextField @bind-Value="Input" Label="Enter Calculation" Variant="Variant.Outlined"></MudTextField>
	<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled">Submit</MudButton>
</EditForm>



<Virtualize Items="CalculatorService.GetValuesList()">
	<div class="card">
		<div class="card-body">
			<h1>@context.Value</h1>
		</div>
	</div>
</Virtualize>


@code {

	private string? Input { get; set; } = string.Empty;

	private void OnSubmit()
	{
		var operators = new[] { "+", "-", "*", "/" };
		var selectedOperator = string.Empty;

		foreach (var op in operators)
		{
			if (Input.Contains(op))
			{
				switch (op)
				{
					case "+":
						selectedOperator = "+";
						break;
					case "-":
						selectedOperator = "-";
						break;
					case "*":
						selectedOperator = "*";
						break;
					case "/":
						selectedOperator = "/";
						break;
					default:
						return;
				}
			}
		}


		var split = Input.Split(selectedOperator);

		var input1 = double.Parse(split[0]);
		var input2 = double.Parse(split[1]);

		var convertedInputValues = new ConvertedValues
		{
			Value1 = input1,
			Value2 = input2
		};

		var result = new Result();

		switch (selectedOperator)
		{
			case "+":
				result = CalculatorService.AddValues(convertedInputValues);
				break;
			case "-":
				result = CalculatorService.SubtractValues(convertedInputValues);
				break;
			case "*":
				result = CalculatorService.MultiplyValues(convertedInputValues);
				break;
			case "/":
				result = CalculatorService.DivideValues(convertedInputValues);
				break;
			default:
				// Handle unexpected operator
				break;
		}

		CalculatorService.AddResult(result);



	}


	//-----------------------------------

	// private Values InputValues { get; set; } = new();

	// private ConvertedValues ConvertedInputValues { get; set; }

	// private void SaveValues()
	// {
	// 	var input1 = double.Parse(InputValues.Value1);
	// 	var input2 = double.Parse(InputValues.Value2);

	// 	ConvertedInputValues.Value1 = input1;
	// 	ConvertedInputValues.Value2 = input2;

	// 	CalculatorService.AddValues(ConvertedInputValues);
	// 	CalculatorService.SubtractValues(ConvertedInputValues);
	// 	CalculatorService.MultiplyValues(ConvertedInputValues);
	// 	CalculatorService.DivideValues(ConvertedInputValues);
		
	// }

}